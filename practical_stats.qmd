---
title: "My answers"
author: "My name"
date: "2022-11-04"
output: html_document
---
  

This practical contains two exercises for inspecting data along with distributions and eventually running statistical tests.

Code should be answered in code blocks but don't forget to also interpret the answer. 
Text answers can be just written using regular markdown. 
Code chunks can act as placeholders for some answers. 

## 1. Testing for normality

We are going to use the `garden` data, with the measurement of ozone concentrations in 3 different areas.

> Objective: the idea is to display the distribution of all three series and look at the shapes. The goal is also to learn how to plot using R and how to customize and combine plots.
Eventually, the final result should look like:
  

![](img/garden.png)

### 1.1 Loading the data

Download the garden dataset from `data/garden.csv` and import it into _R_.

### 1.2 Plotting the main densities

Just plotting the 10 points for each dataset wonâ€™t help much. When looking at the density distribution, one can observe the shape,
if it is bell-shaped or not, and how they compare to each other.
We have seen the `dnorm()` function which produces the density of a normal distribution with a mean of 0
and a standard deviation of 1. 

- Use this function to plot a serie of `x` values in order to obtain a smooth curve (_e.g._ 100 values from -5 to 5). 

```{block, opts.label = "tip"}
`seq()` is a very neat function that you should memorize, remember to check its help page with `?seq`. The argument `length.out` should help to have a smooth line.
```


```{r}
# Write your answer here
```


Now, you would like to apply a density function to your own data. 

- Draw the density plot of gardenA using `ggplot2`.

```{block, opts.label = "tip"}
`geom_density` provides an area while `geom_line` with the proper stat gives the same density curve without the area
```

```{r}
# Write your answer here
```


`ggplot2` centers the view around the range of our data. Try to enhance the output with `expand_limits()` to visualize the extrapolated curve or use the result of `density()` and plot it with `ggplot2`. See for example this output:
  
```{r, eval = FALSE}
density(pull(garden, gardenA))
```

the `x` and `y` data are quantile summarised (based on the 500 data points generated by default).
Each correspond to the `x` and `y` axis of the density plot respectively.

- get the limits of the `x` densities per garden. Before, ask yourself if the _data frame_ is **tidy**?
  
```{r}
# Write your answer here
```


- Add the two other densities (garden B and C) to the first plot, mapping the `fill` to garden's name. The `x` limits will be the minimum and maximum for all 3 gardens.
  Before adding the other gardens, be sure to use a  **tidy** _data frame_.

```{r}
# Write your answer here
```


#### Conclusion

What can you say about the shapes of all the three empirical distributions?

```{r}
# Write your answer here
```


### 1.3 Statistical tests to assess normality

Use the Shapiro test for the three datasets, using  $\alpha=0.05$.

* What can you conclude about these 3 distributions? 
* Are they following the normal distribution? 
* Does it fit your visual expectations?

```{r}
# Write your answer here
```



## 2 Compare two samples

We are now going to use the `wings` dataset, which you can download [here](data/wings.csv). This dataset contains the measurement of wing length in insects living in two  areas $A$ and $B$.

> Objective: Compare both locations and determine if the insects have different sizes of wings. By _difference_, we mean testing several components of what defines a distribution.

### 2.1 Loading the data

- Load the `wings` dataset, which contains the insect wing length measured in two different locations $A$ and $B$.

```{r}
# Write your answer here
```


- What are the variables? Are they continuous or discrete?

```{r}
# Write your answer here
```



### 2.2 How many observations per location

Before doing anything, we would like to have an idea of how much data we are dealing with: globally and per location. How many observations do we have per location?

```{r}
# Write your answer here
```


### 2.3 Plotting densities

First, once we have a new dataset, it is often useful to represent it graphically to get an idea on how it looks like.

We are going to draw the data in three plots using different geometries functions.

1. The two densities with their respective means as vertical dashed lines with the corresponding colors.

```{r}
# Write your answer here
```


2. A box plot of the two 

```{r}
# Write your answer here
```


3. A violin plot of the sizes in both locations. You can add the quantiles usually found in a box plot by `draw_quantiles = c(0.25, 0.5, 0.75)`. 
Add the points using `geom_jitter()` **or** using `ggbeswarm::geom_beeswarm()`. You will need to adjust graphical parameters to achieve good plots.

```{r}
# Write your answer here
```


```{r}
# Write your answer here
```



### 2.4 Comparing the two means

Let's assume size of wings in the two different locations is Normally distributed. 

1. Which test should we use for comparing the two means?

```{r}
# Write your answer here
```


2. Test if the variances are different between the 2 locations? What is the consequence for the test chosen in 2?

```{r}
# Write your answer here
```


3. Define $H_0$ for the appropriate test, and then the alternative hypothesis $H_1$.

```{r}
# Write your answer here
```


4. Perform the test using the built-in _R_ function and conclude

```{block, opts.label = "tip"}
Using the argument `data` of the t test function allows you to use non-standard evaluation of the column of interest
```


```{r}
# Write your answer here
```

